
import java.util.Deque;
import java.util.LinkedList;

public class sumOfksubArray {

static int SumOfKsubArray(int arr[] , int k){
    int sum=0;

    Deque<Integer>S=new LinkedList<>(),G=new LinkedList<>();
    int i=0;

    for(i=0;i<k;i++){
        while (!S.isEmpty() && arr[S.peekLast()]>=arr[i]){
            S.removeLast();
        }

        while (!G.isEmpty() && arr[G.peekLast()]<=arr[i]){
            G.removeLast();
        }
        G.addLast(i);
        S.addLast(i);

    }

    for (  ; i < arr.length; i++ )
    {
        // Element at the front of the deque 'G' & 'S'
        // is the largest and smallest
        // element of previous window respectively
        sum += arr[S.peekFirst()] + arr[G.peekFirst()];

        // Remove all elements which are out of this
        // window
        while ( !S.isEmpty() && S.peekFirst() <= i - k)
            S.removeFirst();
        while ( !G.isEmpty() && G.peekFirst() <= i - k)
            G.removeFirst();

        // remove all previous greater element that are
        // useless
        while ( !S.isEmpty() && arr[S.peekLast()] >= arr[i])
            S.removeLast(); // Remove from rear

        // remove all previous smaller that are elements
        // are useless
        while ( !G.isEmpty() && arr[G.peekLast()] <= arr[i])
            G.removeLast(); // Remove from rear

        // Add current element at rear of both deque
        G.addLast(i);
        S.addLast(i);
    }

    // Sum of minimum and maximum element of last window
    sum += arr[S.peekFirst()] + arr[G.peekFirst()];

    return sum;
}


    public static void main(String args[]){


        int arr[] = {2, 5, -1, 7, -3, -1, -2} ;
        int k = 3;
        System.out.println(SumOfKsubArray(arr, k));

    }

}
