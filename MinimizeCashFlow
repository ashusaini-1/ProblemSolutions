
class CashFlow{

    public  final int N=3;
    public int getmin(int arr[]){
        int minInd=0;
        int n= arr.length;
        for(int i=0;i<n;i++){
            if(arr[i]<arr[minInd]){
                minInd=i;
            }
        }
        return minInd;
    }

    public int getmax(int arr[]){
        int maxInd=0;
        int n= arr.length;
        for(int i=0;i<n;i++){
            if(arr[i]>arr[maxInd]){
                maxInd=i;
            }
        }
        return maxInd;
    }

    // A utility function to return minimum of 2 values

    public int minOf2(int x, int y)
    {
        return (x < y) ? x: y;
    }


    public void minCashFlowRec(int amount[]){
        int mxCredit=getmax(amount),mxDebit=getmin(amount);

        if(amount[mxCredit]==0 && amount[mxDebit]==0)
            return;

        int min=minOf2(-amount[mxDebit],amount[mxCredit]);
        amount[mxCredit]-=min;
        amount[mxDebit]+=min;

        System.out.println("Person " + mxDebit + " pays " + min
                + " to " + "Person " + mxCredit);

        // Recur for the amount array.
        // Note that it is guaranteed that
        // the recursion would terminate
        // as either amount[mxCredit]  or
        // amount[mxDebit] becomes 0
        minCashFlowRec(amount);

    }

    void minCashFlow(int graph[][]){
        // Create an array amount[],
        // initialize all value in it as 0.
        int amount[]=new int[N];

        // Calculate the net amount to
        // be paid to person 'p', and
        // stores it in amount[p]. The
        // value of amount[p] can be
        // calculated by subtracting
        // debts of 'p' from credits of 'p'
        for (int p = 0; p < N; p++)
            for (int i = 0; i < N; i++)
                amount[p] += (graph[i][p] - graph[p][i]);

        minCashFlowRec(amount);
    }


}


public class MinimizeCashFlow {

    public static void main(String args[]){
    CashFlow obj=new CashFlow();
        int graph[][] = { {0, 1000, 2000},
                {0, 0, 5000},
                {0, 0, 0},};

        // Print the solution
        obj.minCashFlow(graph);

    }

}
